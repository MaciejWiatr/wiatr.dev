---
export interface Props {
  src: string;
  alt: string;
  class?: string;
  style?: string;
}

const { src, alt, class: className, style } = Astro.props;
---

<img
  id="hearty-photo"
  src={src}
  alt={alt}
  class:list={["slide-in-from-right", className]}
  style={style}
/>

<style>
  .slide-in-from-right {
    transform: translateX(100px) scale(0.8);
    opacity: 0;

    animation: slideInFromRight 0.8s ease forwards;
    animation-delay: 0.3s;

    @media (max-width: 512px) {
      transform: translateX(0) translateY(100px) scale(0.9);
    }
  }

  @keyframes slideInFromRight {
    to {
      transform: translateX(0) translateY(0) scale(1);
      opacity: 1;
    }
  }
</style>

<script>
  import { animate } from "animejs";

  const image = document.querySelector("#hearty-photo") as HTMLImageElement;

  function throttle(mainFunction: any, delay: number) {
    let timerFlag: any = null;

    return (...args: any[]) => {
      if (timerFlag === null) {
        mainFunction(...args);
        timerFlag = setTimeout(() => {
          timerFlag = null; // Clear the timerFlag to allow the main function to be executed again
        }, delay);
      }
    };
  }

  image.addEventListener(
    "mousemove",
    throttle((event: MouseEvent) => {
      // get mouse position
      const mouseX = event.clientX;
      const mouseY = event.clientY;

      const id = crypto.randomUUID();

      // Create the heart element
      const heart = document.createElement("img");
      heart.id = id;
      heart.className = "heart";
      heart.src = "/heart.png";
      heart.alt = "Heart";

      heart.style.top = mouseY + "px";
      heart.style.left = mouseX + "px";
      heart.style.width = "32px";
      heart.style.height = "32px";
      heart.style.position = "absolute";
      heart.style.display = "block";
      heart.style.zIndex = "1000";
      heart.style.imageRendering = "pixelated";
      heart.style.pointerEvents = "none";

      document.body.appendChild(heart);

      const randomVariable = Math.random() * 10;

      const variants = [
        [
          { y: -30, x: 5 + randomVariable, opacity: 1, rotate: 2 },
          { y: -70, x: 8 + randomVariable, opacity: 0.9, rotate: 4 },
          { y: -120, x: 12 + randomVariable, opacity: 0.6, rotate: 6 },
          { y: -180, x: 15 + randomVariable, opacity: 0.2, rotate: 8 },
          { y: -220, x: 18 + randomVariable, opacity: 0, rotate: 10 },
        ],
        [
          { y: -30, x: -5 + randomVariable, opacity: 1, rotate: -2 },
          { y: -70, x: -8 + randomVariable, opacity: 0.9, rotate: -4 },
          { y: -120, x: -12 + randomVariable, opacity: 0.6, rotate: -6 },
          { y: -180, x: -15 + randomVariable, opacity: 0.2, rotate: -8 },
          { y: -220, x: -18 + randomVariable, opacity: 0, rotate: -10 },
        ],
        [
          { y: -25, x: 3 + randomVariable, opacity: 1, rotate: 1 },
          { y: -60, x: 8 + randomVariable, opacity: 0.95, rotate: 3 },
          { y: -100, x: 15 + randomVariable, opacity: 0.8, rotate: 5 },
          { y: -150, x: 20 + randomVariable, opacity: 0.4, rotate: 7 },
          { y: -200, x: 22 + randomVariable, opacity: 0, rotate: 9 },
        ],
        [
          { y: -35, x: 0 + randomVariable, opacity: 1, rotate: 0 },
          { y: -75, x: 2 + randomVariable, opacity: 0.9, rotate: 2 },
          { y: -125, x: 5 + randomVariable, opacity: 0.7, rotate: 4 },
          { y: -175, x: 8 + randomVariable, opacity: 0.3, rotate: 6 },
          { y: -210, x: 10 + randomVariable, opacity: 0, rotate: 8 },
        ],
      ];

      const keyframes = variants[Math.floor(Math.random() * variants.length)];

      animate(heart, {
        keyframes,
        ease: "linear",
        duration: 1200,
        onComplete: () => {
          heart.remove();
        },
      });
    }, 60)
  );
</script>
